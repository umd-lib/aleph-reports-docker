/*
 * Copyright (c) 2003 The University of Maryland. All Rights Reserved.
 * 
 */

package edu.umd.lims.aleph;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import java.io.BufferedReader;
import java.io.Reader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;

import java.util.zip.GZIPInputStream;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.jsp.JspWriter;

import org.apache.log4j.Category;

import edu.umd.lims.aleph.JAlephBatch;


/*********************************************************************
 Support generic lims/aleph reporting.

 @author  Ben Wallberg

*********************************************************************/


public class Report
{
  public static Category cat  = Category.getInstance(Report.class.getName());

  private String strLib      = null;  // Aleph library
  private String strReport   = null;  // which report? (xpt, etc)
  private String strFile     = null;  // single report file
  private String strFormat   = null;  // report format
  private String strBeanName = null;  // bean to use: instance of this
  private String strCampus   = null;  // campus to report

  private Map mDataRoot = new HashMap();

  private static Pattern pFile = Pattern.compile("(\\d{8}(?:-\\d{6})?)\\.xml(?:\\.gz)?");
  private static Pattern pTitle = Pattern.compile(".*<(?:(?:lims-)?report-)?title>(.*)</(?:(?:lims-)?report-)?title>.*");


  /*************************************************************** getLib */
  /**
   */

  public String
    getLib()
  { return strLib; }


  /************************************************************ getReport */
  /**
   */

  public String
    getReport()
  { return strReport; }


  /************************************************************** getFile */
  /**
   */

  public String
    getFile()   
  { return strFile; }


  /************************************************************ getFormat */
  /**
   */

  public String
    getFormat()
  { return strFormat; }


  /************************************************************ getCampus */
  /**
   */

  public String
    getCampus()
  { return strCampus; }


  /********************************************************** getBeanName */
  /**
   */

  public String
    getBeanName()
  { 
    if (strBeanName == null || strBeanName.equals("")) {
      return "edu.umd.lims.aleph.Report";
    } else {
      return strBeanName; 
    }
  }


  /********************************************************** getDataRoot */
  /**
   */

  public String
    getDataRoot()
  {
    if (strLib == null)
      return null;

    String strDataRoot = null;
    if (mDataRoot.containsKey(strLib)) {
      strDataRoot = (String)mDataRoot.get(strLib);

    } else {
      try {
        JAlephBatch b = new JAlephBatch(strLib);
        strDataRoot = b.getEnv("data_root");
      } 
      catch (Exception e) {
        cat.error("Unable to retrieve the library data_root" + e.getMessage());
        strDataRoot = null;
      }

      mDataRoot.put(strLib, strDataRoot);
    }

    cat.debug("getDataRoot(): " + strDataRoot);
    return strDataRoot;
  }


  /******************************************************** getReportDir  */
  /**
   */

  public String
    getReportDir()
  {
    String strDataRoot = getDataRoot();
    if (strDataRoot == null || strReport == null)
      return null;

    return strDataRoot + "/lims/" + strReport;
  }


  /******************************************************** getReportList */
  /**
   */

  public String
    getReportList()
  {
    StringBuffer sb = new StringBuffer();

    sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
    sb.append("<list>\n");

    // Get the report directory
    String strReportDir = getReportDir();
    if (strReportDir != null) {

      // Get the list of files in the directory
      File fFiles[] = new File(strReportDir).listFiles();
      if (fFiles != null) {
        Arrays.sort(fFiles);

        // Loop through the files
        boolean bFirst = true;  // First report file processed
        for (int i=fFiles.length-1; i > -1; i--) {
          String strName = fFiles[i].getName();
          cat.debug("getReportList(): checking file: " + strName);

	  // Check for a matching file
	  Matcher mFile = pFile.matcher(strName);
          if (mFile.matches())
	  {
	    String strFile = mFile.group(1);
	    cat.debug("getReportList(): file: " + strFile);

	    sb.append("  <entry>\n");
	    sb.append("    <file>" + strFile + "</file>\n");
	    sb.append("    <text>" + strFile + getTitleOptionsCached(fFiles[i]) + "</text>\n");
	    if (((this.strFile == null || this.strFile.equals("")) && 
		 bFirst) ||
		(this.strFile != null && this.strFile.equals(strFile)))
	      sb.append("    <selected/>\n");
	    sb.append("  </entry>\n");

	    bFirst = false;
	  }
        }
      }

    }

    sb.append("</list>\n");

    String strRet = sb.toString();

    cat.debug("getReportList():\n" + strRet);

    return strRet;
  }


  /*********************************************************** getXmlFile */
  /**
   */

  public String
    getXmlFile()
  {
    String strReportDir = getReportDir();
    if (strReportDir == null)
      return null;

    String strFile = strReportDir + "/" + getFile() +".xml";
    if ((new File(strFile)).exists()) {
      return strFile;
    } else {
      strFile += ".gz";
      if ((new File(strFile)).exists()) {
	return strFile;
      }
    }

    return "???";
  }


  /********************************************************* getXmlReader */
  /**
   */

  public Reader
    getXmlReader()
    throws IOException
  {
    return getFileReader(new File(getXmlFile()));
  }


  /********************************************************* getFileReader */
  /**
   */

  public static Reader
    getFileReader(File f)
    throws IOException
  {
    // Open the file
    InputStream i  = new FileInputStream(f);

    // Unzip it if necessary
    if (f.getName().endsWith(".gz"))
      i = new GZIPInputStream(i);

    // Filter out control characters
    i = new FilterXMLInputStream(i);

    return new InputStreamReader(i, "UTF8");
  }


  /*********************************************************** getXslFile */
  /**
   */

  public String
    getXslFile()
  {
    String strReportDir = getReportDir();
    if (strReportDir == null)
      return null;

    return "file:" + strReportDir + "/report.xsl";
  }


  /**************************************************** getTitleCacheFile */
  /**
   * Get the title cache file.  Create the cache directory if necessary.
   */

  protected File
    getTitleCacheFile(File f)
    throws IOException
  {
    // Get the cache directory (create if necessary)
    File fCacheDir = new File(f.getParentFile(), "cache");
    if (!fCacheDir.exists()) {
      cat.debug("Creating cache dir: " + fCacheDir);
      fCacheDir.mkdir();
    }

    // Build the cache file name
    String strName = (f.getName().endsWith(".gz")
		      ? f.getName().substring(0,f.getName().length()-3)
		      : f.getName());
    File fCache = new File(fCacheDir, strName + ".title");

    return fCache;
  }

			   
  /************************************************ getTitleOptionsCached */
  /**
   * Get the report title extras for a particular report using the
   * cached value if it is available.
   */

  public String
    getTitleOptionsCached(File f)
  {
    String strTitle = null;

    // Get the cached file name
    File fCache = null;
    try {
      fCache = getTitleCacheFile(f);
    }
    catch (IOException e) {
      cat.error("Error getting cached title file name");
      return "";
    }

    // Look for the file
    cat.debug("Checking for cached title file: " + fCache);

    if (!fCache.exists() ) {
      cat.debug(fCache + " not found.");

    } else if (f.lastModified() > fCache.lastModified()) {
      cat.debug("Cache file found, but is stale; rebuilding.");

    } else {
      // Get the title
      try {
	// Open the file
	BufferedReader br = new BufferedReader(getFileReader(fCache));

	// Read the title
	strTitle = br.readLine();

	br.close();

	cat.debug("Read cached title: " + strTitle);
      }
      catch (Exception e) {
	cat.error("Error reading cached title from " + fCache + ": " + e.getMessage());
      }
    }

    // If no cached title, get it now
    if (strTitle == null) {

      strTitle = getTitleOptions(f);

      // Cache the title
      try {
	// Open the file
	fCache.createNewFile();
	OutputStreamWriter w = new OutputStreamWriter(new FileOutputStream(fCache), "UTF8");

	// Write the title
	w.write(strTitle);

	w.close();

	cat.debug("Wrote cached title: " + strTitle);
      }
      catch (Exception e) {
	cat.error("Error saving cached title to " + fCache + ": " + e.getMessage());
      }
    }

    return strTitle;
  }


  /****************************************************** getTitleOptions */
  /**
   * Get the report title extras for a particular report.
   */

  public String
    getTitleOptions(File f)
  {
    int j,k;
    BufferedReader br = null;

    try {
      // Open the file
      br = new BufferedReader(getFileReader(f));

      // Read the file
      String strLine;
      while ((strLine = br.readLine()) != null) {

        // Title
	Matcher mTitle = pTitle.matcher(strLine);
	if (mTitle.matches())
	{
	  return " [" + mTitle.group(1).trim() + "]";
	}
      }
    }
    catch (Exception e) {
      cat.error("Error reading title information for " + f + ": " + e.getMessage());
    }
    finally {
      if (br != null) {
        try {
          br.close();
        }
        catch (Exception e) {};
      }
    }
      
    return "";
  }


  /************************************************************* writeXml */
  /**
   * Write the xml file to the JspWriter.
   */

  public void
    writeXml(JspWriter out)
    throws IOException
  {

    BufferedReader br = null;
    try {
      // Get the file name
      String strReportDir = getReportDir();
      if (strReportDir == null)
        return;

      br = new BufferedReader(getXmlReader());

      // Forward the file
      char c[] = new char[4096];
      int l;
      while ((l = br.read(c, 0, 4096)) > -1)
        out.write(c, 0, l);

    }
   
    catch (IOException e) {
      cat.error("Error reading xml report file: " + e.getMessage());
    }

    finally {
      if (br != null)
        br.close();
    }

  }


  /*************************************************************** setLib */
  /**
   */

  public void
    setLib(String strLib)
  { this.strLib = strLib; }


  /************************************************************ setReport */
  /**
   */

  public void
    setReport(String strReport)
  { this.strReport = strReport; }


  /************************************************************** setFile */
  /**
   */

  public void
    setFile(String strFile)
  { this.strFile = strFile; }


  /************************************************************ setFormat */
  /**
   */

  public void
    setFormat(String strFormat)
  { this.strFormat = strFormat; }

  
  /************************************************************ setCampus */
  /**
   */

  public void
    setCampus(String strCampus)
  { this.strCampus = strCampus; }


  /********************************************************** setBeanName */
  /**
   */

  public void
    setBeanName(String strBeanName)
  { this.strBeanName = strBeanName; }

}

